import numpy as np
import matplotlib.pyplot as plt
import os

# delete if not needed
######
from pathlib import Path
import sys
path_root = Path(__file__).parents[2]
sys.path.append(str(path_root))

import os
os.environ["KMP_DUPLICATE_LIB_OK"]="TRUE"
######

import args
from src.utils import get_args, set_seed, set_torch_dtype, ftype_torch #, set_torch_multiprocessing
from src.model_simple import Model
import src.config

# Get args
args = get_args(args)

# Set float precision
set_torch_dtype(args.ftype)

# Set multiprocessing
# set_torch_multiprocessing()

# Set seed for reproducibility
set_seed(args.seed)

def streamfunction(x, y, vort, U_inf, R=1):
    y = np.abs(y)
    r = np.sqrt(x**2 + y**2)/R
    x, y = x/R, y/R
    psi = vort*y**2/2 + vort/(2*np.pi)*((1-1/r**2)*y + (x*y*(r**4-1))/(2*r**4)*np.log((r**2-2*x+1)/(r**2+2*x+1)) \
                +1/2*((1+1/r**4)*(x**2-y**2)-2)*np.arctan(2*y/(r**2-1))) + U_inf*(1-1/r**2)*y
    return psi

d = 3
N = 1000
x = np.linspace(-d,d,N)
y = np.linspace(-d,d,N)
X,Y = np.meshgrid(x,y)
vort = 3
U_inf = 1
R = 1.5
psi = streamfunction(X,Y,vort,U_inf,R)
mask = X**2 + Y**2 < R**2
psi[mask] = 0

fig, ax = plt.subplots(figsize=(10,10))
n_levels = 25
ax.contour(X,Y,psi,levels=n_levels,linewidths=1)
circle = plt.Circle((0, 0), R, color='r', alpha=.5)
ax.add_artist(circle)
ax.set_aspect('equal')
plt.show()
